// Copyright (c) 2025 Ian Chen
// SPDX-License-Identifier: MPL-2.0

#ifndef SEMI_ERROR_H
#define SEMI_ERROR_H

#define SEMI_LEX_ERROR_BASE      256
#define SEMI_COMPILER_ERROR_BASE 512
#define SEMI_VM_ERROR_BASE       768

// GLOBAL ERROR
#define SEMI_ERROR_INTERNAL_ERROR            1
#define SEMI_ERROR_REACH_ALLOCATION_LIMIT    2
#define SEMI_ERROR_MEMORY_ALLOCATION_FAILURE 3
#define SEMI_ERROR_UNIMPLEMENTED_FEATURE     4
#define SEMI_ERROR_UNEXPECTED_END_OF_FILE    5
#define SEMI_ERROR_MODULE_NOT_FOUND          6

//
// LEX ERROR
//
#define SEMI_ERROR_INVALID_UTF_8            (SEMI_LEX_ERROR_BASE + 1)
#define SEMI_ERROR_UNCLOSED_STRING          (SEMI_LEX_ERROR_BASE + 2)
#define SEMI_ERROR_INCOMPLETE_STIRNG_ESCAPE (SEMI_LEX_ERROR_BASE + 3)
#define SEMI_ERROR_UNKNOWN_STIRNG_ESCAPE    (SEMI_LEX_ERROR_BASE + 4)
#define SEMI_ERROR_EXPECT_SEPARATOR         (SEMI_LEX_ERROR_BASE + 5)
#define SEMI_ERROR_IDENTIFIER_TOO_LONG      (SEMI_LEX_ERROR_BASE + 6)
#define SEMI_ERROR_INVALID_NUMBER_LITERAL   (SEMI_LEX_ERROR_BASE + 7)

//
// COMPILER ERROR
//
#define SEMI_ERROR_UNEXPECTED_TOKEN               (SEMI_COMPILER_ERROR_BASE + 1)
#define SEMI_ERROR_TOO_MANY_LOCAL_VARIABLES       (SEMI_COMPILER_ERROR_BASE + 2)
#define SEMI_ERROR_TOO_MANY_CONSTANTS             (SEMI_COMPILER_ERROR_BASE + 3)
#define SEMI_ERROR_EXPECT_LVALUE                  (SEMI_COMPILER_ERROR_BASE + 4)
#define SEMI_ERROR_UNINITIALIZED_VARIABLE         (SEMI_COMPILER_ERROR_BASE + 5)
#define SEMI_ERROR_MAXMUM_BRACKET_REACHED         (SEMI_COMPILER_ERROR_BASE + 6)
#define SEMI_ERROR_TOO_MANY_INSTRUCTIONS_FOR_JUMP (SEMI_COMPILER_ERROR_BASE + 7)
#define SEMI_ERROR_TOO_MANY_STRUCT_FIELDS         (SEMI_COMPILER_ERROR_BASE + 8)
#define SEMI_ERROR_DUPLICATE_NAME                 (SEMI_COMPILER_ERROR_BASE + 9)
#define SEMI_ERROR_TOO_MANY_ARGUMENTS             (SEMI_COMPILER_ERROR_BASE + 10)
#define SEMI_ERROR_TOO_MANY_LOOP_LEVELS           (SEMI_COMPILER_ERROR_BASE + 11)
#define SEMI_ERROR_TOO_MANY_MODULES               (SEMI_COMPILER_ERROR_BASE + 12)
#define SEMI_ERROR_SET_GLOBAL_NAME                (SEMI_COMPILER_ERROR_BASE + 13)
#define SEMI_ERROR_VARIABLE_ALREADY_DEFINED       (SEMI_COMPILER_ERROR_BASE + 14)
#define SEMI_ERROR_TOO_MANY_VARIABLES             (SEMI_COMPILER_ERROR_BASE + 15)
#define SEMI_ERROR_TOO_MANY_UPVALUES              (SEMI_COMPILER_ERROR_BASE + 16)
#define SEMI_ERROR_MODULE_TOO_LARGE               (SEMI_COMPILER_ERROR_BASE + 17)
#define SEMI_ERROR_TOO_MANY_FUNCTIONS_IN_MODULE   (SEMI_COMPILER_ERROR_BASE + 18)
#define SEMI_ERROR_INVALID_MODULE_EXPORT          (SEMI_COMPILER_ERROR_BASE + 19)
#define SEMI_ERROR_BINDING_ERROR                  (SEMI_COMPILER_ERROR_BASE + 20)
#define SEMI_ERROR_INCONSISTENT_RETURN_COUNT      (SEMI_COMPILER_ERROR_BASE + 21)
#define SEMI_ERROR_NESTED_DEFER                   (SEMI_COMPILER_ERROR_BASE + 22)
#define SEMI_ERROR_RETURN_VALUE_IN_DEFER          (SEMI_COMPILER_ERROR_BASE + 23)

//
// VM ERROR
//
#define SEMI_ERROR_STACK_OVERFLOW         (SEMI_VM_ERROR_BASE + 1)
#define SEMI_ERROR_STACK_UNDERFLOW        (SEMI_VM_ERROR_BASE + 2)
#define SEMI_ERROR_INVALID_OPCODE         (SEMI_VM_ERROR_BASE + 3)
#define SEMI_ERROR_INVALID_INSTRUCTION    (SEMI_VM_ERROR_BASE + 4)
#define SEMI_ERROR_UNEXPECTED_TYPE        (SEMI_VM_ERROR_BASE + 5)
#define SEMI_ERROR_INVALID_PC             (SEMI_VM_ERROR_BASE + 6)
#define SEMI_ERROR_DIVIDE_BY_ZERO         (SEMI_VM_ERROR_BASE + 7)
#define SEMI_ERROR_ARGS_COUNT_MISMATCH    (SEMI_VM_ERROR_BASE + 8)
#define SEMI_ERROR_INVALID_VALUE          (SEMI_VM_ERROR_BASE + 9)
#define SEMI_ERROR_KEY_NOT_FOUND          (SEMI_VM_ERROR_BASE + 10)
#define SEMI_ERROR_INDEX_OOB              (SEMI_VM_ERROR_BASE + 11)
#define SEMI_ERROR_STRING_TOO_LONG        (SEMI_VM_ERROR_BASE + 12)
#define SEMI_ERROR_TOO_MANY_GLOBAL_VARS   (SEMI_VM_ERROR_BASE + 13)
#define SEMI_ERROR_MISSING_RETURN_VALUE   (SEMI_VM_ERROR_BASE + 14)
#define SEMI_ERROR_TOO_MANY_DEFER_CALLS   (SEMI_VM_ERROR_BASE + 15)
#define SEMI_ERROR_INVALID_FUNCTION_PROTO (SEMI_VM_ERROR_BASE + 16)

typedef unsigned int ErrorId;

#endif /* SEMI_ERROR_H */
